import{_ as t,c as r,a2 as o,o as a}from"./chunks/framework.Cy5ZJKdt.js";const g=JSON.parse('{"title":"HTML5面试题集","description":"","frontmatter":{},"headers":[],"relativePath":"interview/h5css-skill.md","filePath":"interview/h5css-skill.md"}'),l={name:"interview/h5css-skill.md"};function s(i,e,n,d,c,p){return a(),r("div",null,e[0]||(e[0]=[o('<h1 id="html5面试题集" tabindex="-1">HTML5面试题集 <a class="header-anchor" href="#html5面试题集" aria-label="Permalink to &quot;HTML5面试题集&quot;">​</a></h1><p>HTML5是互联网的新一代Web内容构建标准，是构建以及呈现互联网内容的一种语言方式，被认为是互联网的核心技术之一。<a href="https://www.w3school.com.cn/html/index.asp" target="_blank" rel="noreferrer">查看HTML文档</a></p><h3 id="_1、行内元素和块级元素都有哪些" tabindex="-1">1、行内元素和块级元素都有哪些？ <a class="header-anchor" href="#_1、行内元素和块级元素都有哪些" aria-label="Permalink to &quot;1、行内元素和块级元素都有哪些？&quot;">​</a></h3><p><strong>（1）行内元素</strong>：div、h1~h6、hr、p、li、ul、ol、table、from、blockquote；<br><strong>（2）块级元素</strong>：a、span、img、input、textarea、select；</p><h3 id="_2、html5的拖拽如何实现-有哪些api" tabindex="-1">2、HTML5的拖拽如何实现，有哪些API？ <a class="header-anchor" href="#_2、html5的拖拽如何实现-有哪些api" aria-label="Permalink to &quot;2、HTML5的拖拽如何实现，有哪些API？&quot;">​</a></h3><p>dragstart: 事件主体为被拖拽元素，在开始拖放元素时触发</p><p>dragend: 事件主体是被拖放元素，整个拖拽操作结束时触发</p><p>drag: 事件主体是被拖放元素，正在拖放元素时触发</p><p>dragenter: 事件主体是目标元素，被拖放元素进入时触发</p><p>dragover: 事件主体是目标元素，被拖放元素在目标元素内移 动时触发</p><p>dragleave: 事件主体是目标元素，被拖放元素移出时触发</p><p>drop: 事件主体是目标元素，整个拖放操作完全结束时触发</p><h3 id="_3、html5新增的标签有那些" tabindex="-1">3、HTML5新增的标签有那些？ <a class="header-anchor" href="#_3、html5新增的标签有那些" aria-label="Permalink to &quot;3、HTML5新增的标签有那些？&quot;">​</a></h3><p>H5新增的标签包括：</p><p><code>&lt;section&gt;</code>定义文档中的节、<code>&lt;header&gt;</code>定义 section 或 document 的页眉、<code>&lt;footer&gt;</code>定义 section 或 document 的页脚、</p><p><code>&lt;article&gt;</code>定义外部的内容、<code>&lt;aside&gt;</code>定义 article 以外的内容、</p><p><code>&lt;audio&gt;</code>定义声音如音乐或其他音频流、<code>&lt;canvas&gt;</code>定义画布，比如矢量图表和其他图像、<code>&lt;video&gt;</code>定义视频如电影片段或其他视频流、<code>&lt;source&gt;</code>为媒介元素（比如 <code>&lt;video&gt; </code>和<code> &lt;audio&gt;</code>）定义媒介资源、</p><p><code>&lt;time&gt;</code>定义日期或时间，或者两者、<code>&lt;progress&gt;</code>显示 JavaScript 中耗费时间的函数的进程;</p><h1 id="css3面试题集" tabindex="-1">CSS3面试题集 <a class="header-anchor" href="#css3面试题集" aria-label="Permalink to &quot;CSS3面试题集&quot;">​</a></h1><p>CSS3 是CSS（层叠样式表）技术的最新标准。主要包括盒子模型、列表模块、超链接方式、语言模块、背景和边框、文字特效、多栏布局、过渡动画、2D/3D转换等模块。</p><h3 id="_1、px-em-rem的区别" tabindex="-1">1、px/em/rem的区别？ <a class="header-anchor" href="#_1、px-em-rem的区别" aria-label="Permalink to &quot;1、px/em/rem的区别？&quot;">​</a></h3><ul><li>px：绝对单位长度，相对于显示器屏幕分辨率来定义，大小固定，不随浏览器的缩放而改变；</li><li>em：相对单位长度，相对于当前元素的父元素字体大小定义；</li><li>rem：CSS3引入的一种相对单位长度，它相对于HTML根元素的字体大小，优点是可以通过直接修改根元素字体大小来控制长度比例；初始：1em = 1rem = 16px</li></ul><h3 id="_2、什么是回流和重绘" tabindex="-1">2、什么是回流和重绘？ <a class="header-anchor" href="#_2、什么是回流和重绘" aria-label="Permalink to &quot;2、什么是回流和重绘？&quot;">​</a></h3><p><strong>（1）定义及区别</strong>：<br>   ① 回流也叫重排，指的是浏览器重新计算并绘制经修改后的元素的过程，并重新渲染页面，元素的几何属性发生改变（比如修改元素的宽、高或隐藏元素等）‌；<br>   ② 重绘指的是浏览器根据元素的样式信息重新绘制页面，‌但没有改变元素的几何属性（比如修改了颜色或背景色）。<br><strong>（2）如何避免</strong>：<br>   ① 尽量使用class属性来批量修改样式；<br>   ② 使用CSS3动画或transform来实现动画效果，因为这些属性通常会在GPU层面处理，而不会引起回流，性能更好；<br>   ③避免频繁读取布局信息，如获取offsetTop、offsetLeft等信息；<br><strong>注意</strong>：重绘不一定导致回流，回流一定会导致重绘，回流的性能开销更大</p><h2 id="_3、css常用的伪元素有哪些-如何使用" tabindex="-1">3、CSS常用的伪元素有哪些，如何使用 <a class="header-anchor" href="#_3、css常用的伪元素有哪些-如何使用" aria-label="Permalink to &quot;3、CSS常用的伪元素有哪些，如何使用&quot;">​</a></h2><p>  常用的伪元素有：<br>   <code>::before</code>（在元素之前插入内容并修改样式）、<code>::after</code>（在元素之后插入内容并修改样式）、:<code>:first-letter</code>（设置第一个字符的样式）、<code>::first-line</code>（设置第一行的样式）、<code>::placeholder</code>（设置输入字段的占位符）</p><h2 id="_4、css选择器的优先级" tabindex="-1">4、CSS选择器的优先级 <a class="header-anchor" href="#_4、css选择器的优先级" aria-label="Permalink to &quot;4、CSS选择器的优先级&quot;">​</a></h2><p>!important &gt; 内联样式1000 &gt; Id选择器100 &gt; 属性选择器10 &gt; 伪类选择器10 &gt; Class选择器10 &gt; 伪元素选择器1 &gt; 元素选择器1</p><h2 id="_5、标准盒模型和怪异盒模型的区别" tabindex="-1">5、标准盒模型和怪异盒模型的区别 <a class="header-anchor" href="#_5、标准盒模型和怪异盒模型的区别" aria-label="Permalink to &quot;5、标准盒模型和怪异盒模型的区别&quot;">​</a></h2><p><strong>标准盒模型</strong>：width = content + margin</p><p><strong>怪异盒模型</strong>：width = content + border + padding + margin</p><h2 id="_6、flex弹性布局常用属性有哪些" tabindex="-1">6、Flex弹性布局常用属性有哪些 <a class="header-anchor" href="#_6、flex弹性布局常用属性有哪些" aria-label="Permalink to &quot;6、Flex弹性布局常用属性有哪些&quot;">​</a></h2><p><strong>flex-direction:</strong> 弹性容器中子元素排列方式,其包含的值有：row、row-reverse、column、column-reverse</p><p><strong>flex-warp:</strong> 设置弹性盒子的子元素的换行</p><p><strong>flex-flow:</strong> 上面这两种属性的简写形式</p><p><strong>align-item:</strong> 设置弹性盒子元素在侧轴上的对齐方式</p><p><strong>align-content:</strong> 设置行对齐</p><p><strong>justify-content:</strong> 设置弹性盒子元素在主轴上的对齐方式</p><p><strong>flex-basis:</strong> 设置子元素在主轴上的初始大小，其值有：auto、%、px</p><p><strong>flex-grow:</strong> 设置flex的增长系数，与flex-basis类似，以比例设置</p><h2 id="_7、对于bfc的理解" tabindex="-1">7、对于BFC的理解 <a class="header-anchor" href="#_7、对于bfc的理解" aria-label="Permalink to &quot;7、对于BFC的理解&quot;">​</a></h2><p>  BFC块级格式化上下文可以理解为CSS元素的一个属性，它属于普通流元素，可以创建一个隔离的独立的渲染容器，并且可以用于处理外边距重叠现象，清除浮动、阻止元素被浮动元素覆盖等问题；触发BFC的方式有：html根元素、浮动元素、绝对定位元素、overflow属性元素等；</p><h2 id="_8、requir和import的区别-加载模块的区别" tabindex="-1">8、requir和import的区别，加载模块的区别 <a class="header-anchor" href="#_8、requir和import的区别-加载模块的区别" aria-label="Permalink to &quot;8、requir和import的区别，加载模块的区别&quot;">​</a></h2><p>  ‌require和import的主要区别在于它们所属的模块化规范不同，加载时机不同，以及动态绑定和缓存方式的不同。   <strong>(1)所属规范不同：</strong> require是CommonJS规范的一部分，主要用于Node.js环境，无法直接用于浏览器端。import是ES6（ECMAScript 2015）引入的关键字，属于ES模块化语法规范，主要用于浏览器端。   <strong>(2)加载时机不同：</strong> import是静态引入，必须在文件的顶部使用，提高了加载效率，但也限制了其使用位置‌；编译时加载。require是动态引入，可以在代码的任何位置使用，运行时加载，更加灵活但可能影响性能‌。   <strong>(3)动态绑定和缓存方式不同：</strong> import提供静态分析，支持宏和类型检验，但无法实现动态绑定；require提供动态绑定，适合服务器或浏览器环境。多次要求相同的模块时，只会执行一次，因为缓存机制的存在‌。</p>',44)]))}const m=t(l,[["render",s]]);export{g as __pageData,m as default};
