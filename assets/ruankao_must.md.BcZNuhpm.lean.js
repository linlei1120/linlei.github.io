import{_ as t,c as p,a2 as a,o}from"./chunks/framework.Cy5ZJKdt.js";const c=JSON.parse('{"title":"软考必背","description":"","frontmatter":{},"headers":[],"relativePath":"ruankao/must.md","filePath":"ruankao/must.md"}'),n={name:"ruankao/must.md"};function s(e,r,g,h,i,l){return o(),p("div",null,r[0]||(r[0]=[a('<h1 id="软考必背" tabindex="-1">软考必背 <a class="header-anchor" href="#软考必背" aria-label="Permalink to &quot;软考必背&quot;">​</a></h1><h2 id="_1、cmm能力成熟度模型的5个阶段" tabindex="-1">1、CMM能力成熟度模型的5个阶段 <a class="header-anchor" href="#_1、cmm能力成熟度模型的5个阶段" aria-label="Permalink to &quot;1、CMM能力成熟度模型的5个阶段&quot;">​</a></h2><p>  <strong>（1）初始级：</strong> 软件过程的特点时杂乱无章，有时甚至很混乱，几乎没有明确定义的步骤、项目的成功完全依赖个人的努力和英雄式核心人物的作用；</p><p>  <strong>（2）可重复级：</strong> 建立了基本的项目管理过程和实践来跟踪项目费用、进度和功能特性，有必要的过程准则来重复以前在同类项目中的成功；</p><p>  <strong>（3）已定义级：</strong> 管理和工程两方面的软件过程已经文档化、标准化，并综合成整个软件开发组织的标准软件过程；</p><p>  <strong>（4）已管理级：</strong> 制定了软件过程和产品质量的详细度量标准，软件过程的产品质量都被开发组织的成员理解和控制；</p><p>  <strong>（5）优化级：</strong> 加强了定量分析，通过来自过程质量反馈和来自新观念、新技术的反馈使过程能不断持续地改进；</p><h2 id="_2、cmmi能力成熟度模型集成" tabindex="-1">2、CMMI能力成熟度模型集成 <a class="header-anchor" href="#_2、cmmi能力成熟度模型集成" aria-label="Permalink to &quot;2、CMMI能力成熟度模型集成&quot;">​</a></h2><p>  <strong>（1）CL0（未完成）：</strong> 过程序未执行或未得到CL1中定义的所有目标；</p><p>  <strong>（2）CL1（已执行）：</strong> 其共享目标时将可标识的输入工作产品转换成可标识的输出工作产品，以实现支持过程域的特定目标;</p><p>  <strong>（3）CL2（已管理）：</strong> 其共性目标集中于一管理的过程的制度化；</p><p>  <strong>（4）CL3（已定义级）：</strong> 其共性目标集中于已定义的过程的制度化；</p><p>  <strong>（5）CL4（定量管理级）：</strong> 其共性目标集中于定量管理级的过程的制度化；</p><p>  <strong>（6）CL5（优化级）：</strong> 使用量化（统计学）手段改变和优化过程域；</p><h2 id="_3、软件过程模型" tabindex="-1">3、软件过程模型 <a class="header-anchor" href="#_3、软件过程模型" aria-label="Permalink to &quot;3、软件过程模型&quot;">​</a></h2><p>  <strong>（1）瀑布模型：</strong>   ① 核心：以文档作为驱动、适合于软件需求很明确的软件项目模型</p><p>  ② 优点：容易理解、管理成本低</p><p>  ③ 缺点：需求必须清晰完整、需求或设计错误在后期才会发现、项目风控能力弱、项目易延期</p><p>  <strong>（2）增量模型：</strong>   ① 核心：是瀑布模型的变体，强调每一个增量均发布一个可操作产品</p><p>  ② 优点：第一个可交付版本所需成本和时间低、开发由增量表示的小系统所承担的风险不大；减少客户需求变更；运行增量投资；</p><p>  ③ 缺点：早期需求要清晰稳定，否则会影响开发进度</p><p>  <strong>（3）演化模型：</strong>   ① 概述：演化模型是迭代的过程模型，专门应对不断演变的软件产品，特别适合用于对软件需求缺乏准确认识的情况；分为原型模型和螺旋模型</p><p>  ② 原型模型：<br>    1）适用场景：系统规模不大，也不太复杂，用户需求不清，需求经常变化的情况；<br>    2）基本步骤：=&gt;交流=&gt;快速计划=&gt;构建原型=&gt;部署交付和反馈=&gt;</p><p>  ③ 螺旋模型：    1）适用场景：将瀑布模型和演化模型结合，加入风险分析，应用于复杂的大型的，具有高风险的软件系统<br>    2）主要工作步骤：制定计划、风险分析、实施工程、用户评估<br>    3）优点：支持用户需求动态变化，有助于提高软件适应能力，降低软件开发风险<br>    4）缺点：需要开发人员具有相当丰富经验，多次迭代会增加开发成本，延迟交付时间</p><p>  <strong>（4）喷泉模型：</strong>   ① 核心：以用户需求为动力，以对象为驱动的模型，适合与面向对象开发方法；   ② 概述：开发过程具有迭代性和无间隙性，即开发中多次重复开发活动，迭代中不断完善以及开发活动没有明显边界;与瀑布模型的那顺序进行不同，喷漆模型允许开发活动交叉、迭代进行   ③ 优点：开发人员可同步进行，提高开发效率，节省开发时间   ④ 缺点：由于各个开发阶段重叠，需要大量人员，不利于项目管理；需要雅阁管理文档，审核难度加大</p><p>  <strong>（5）统一过程(UP)模型</strong><br>   ① 核心：用例和风险驱动，以架构为中心，迭代并且增量   ② 主要阶段：起始阶段、精化阶段、构建阶段、移交阶段</p><h2 id="_4、敏捷方法" tabindex="-1">4、敏捷方法 <a class="header-anchor" href="#_4、敏捷方法" aria-label="Permalink to &quot;4、敏捷方法&quot;">​</a></h2><p>  ① 核心：尽可能早地、持续地对有价值的软件交付，在软件开发过程中加入灵活性</p><p>  ② 典型方法：</p><p>   1）极限编程(XP)</p><p>   是一种轻量、高效、低风险、柔性、可预测的、科学的软件开发方式</p><p>   组成部分：价值观、原则、实践、行为</p><p>   四大价值观：沟通、简单性、反馈和勇气</p><p>   最佳实践：计划实践（快速制定计划，随细节变化而完善）、小型发布、简单设计、测试先行（先写测试代码再编写程序）、重构、持续集成、每周工作40小时、现场客户和编码标准；</p><p>   2）水晶法(Crystal)</p><p>   每个不同的项目都需要一套不同的策略、约定和方法论，开发人员的素质对项目质量有很大的影响</p><p>   3）并列争求法(Scrum)</p><p>   使用迭代的方法，30天的迭代为一个冲刺，按需求优先级来实现产品，多个自组织或自治小组并行地递增实现产品。</p><p>   4）自适应软件开发(ASD)</p><p>   使自适应软件开发6个原则：有一个使命作为指导、特征被视为客户价值的关键点、”重做“与”做“同样关键、变化不被视为改正而是对开发实际情况的调整、交付时间确定迫使开发人员认真考虑每一个生产版本的关键需求；</p><p>   5）敏捷统一过程(AUP)</p><p>   核心：采用在大型上连续，在小型上迭代的原理构建软件系统</p><p>   特点：采用经典的UP阶段性活动(初始、精化、构建、转换)；一个团队迭代使用敏捷开发，将有意义的软件增量尽快交付；</p><p>   AUP迭代执行活动：建模、实现、测试、部署、配置及项目管理、环境管理</p><h2 id="_5、7种耦合类型" tabindex="-1">5、7种耦合类型 <a class="header-anchor" href="#_5、7种耦合类型" aria-label="Permalink to &quot;5、7种耦合类型&quot;">​</a></h2><p>  <strong>（1）无直接耦合：</strong> 模块间没有直接的关系，不传递任何消息，耦合性最低，独立性最高；</p><p>  <strong>（2）数据耦合：</strong> 模块间由调用关系，值传递简单的数据值，相当于值传递；</p><p>  <strong>（3）标记传递：</strong> 模块间传递数据结构；</p><p>  <strong>（4）控制耦合：</strong> 模块间传递控制变量，调用模块具有多少功能，起什么作用由被调用模块控制；</p><p>  <strong>（5）外部耦合：</strong> 模块间通过软件之外的环境联结；</p><p>  <strong>（6）公共耦合：</strong> 通过一个公共数据环境相互作用的那些模块间的耦合；</p><p>  <strong>（7）内容耦合；</strong> 一个模块直接使用另一个模块的内部数据，或通过非正常入口转入另一个模块内部；</p><h2 id="_6、箭头函数是什么-与普通函数有何区别" tabindex="-1">6、箭头函数是什么，与普通函数有何区别 <a class="header-anchor" href="#_6、箭头函数是什么-与普通函数有何区别" aria-label="Permalink to &quot;6、箭头函数是什么，与普通函数有何区别&quot;">​</a></h2><p>  <strong>（1）偶然内聚：</strong> 一个模块内各处理单元之间没有联系；</p><p>  <strong>（2）逻辑内聚：</strong> 模块内执行若干个逻辑上相似的功能，通过参数确定该模块完成那个功能；</p><p>  <strong>（3）时间内聚：</strong> 把需要同时执行的动作组合在一起形成的模块；</p><p>  <strong>（4）过程内聚：</strong> 指一个模块完成多个任务这些任务必须按指定的过程执行；</p><p>  <strong>（5）通信内聚：</strong> 指某模块内的所有处理元素都在同一个数据结构上操作；</p><p>  <strong>（6）顺序内聚：</strong> 指一个模块中的各个处理元素都密切像关于同一个功能且必须顺序执行，前一个功能的输出就是下一个功能的输入；</p><p>  <strong>（7）功能内聚：</strong> 指模块内所有元素共同作用完成一个功能，缺一不可；</p><h2 id="_7、面向对象设计基本原则" tabindex="-1">7、面向对象设计基本原则 <a class="header-anchor" href="#_7、面向对象设计基本原则" aria-label="Permalink to &quot;7、面向对象设计基本原则&quot;">​</a></h2><p>  <strong>① 单一责任原则：</strong> 就一个类而言，应该仅有一个引起其变化的原因</p><p>  <strong>② 开放-封闭原则：</strong> 软件实体应该是可扩展的(开放的)，但是不可修改的(封闭的)</p><p>  <strong>③ 里氏替换原则：</strong> 子类型必须能够替换掉他们的基类型</p><p>  <strong>④ 依赖倒置原则：</strong> 高层模块不应该依赖于底层模块，二者都应该依赖于抽象</p><p>  <strong>⑤ 接口分离原则：</strong> 不应该强迫客户依赖于他们不用的方法，接口属于用户，不属于它所在的类层次结构，依赖于抽象，不要依赖于具体</p><p>  <strong>⑥ 共同重用：</strong> 包中的所有类对于同一类性质的变化应该是共同封闭的，对包内所有类有影响，但对其他包无影响</p><p>  <strong>⑦ 共同重用原则：</strong> 如果重用了包中一个类，那么就要重用包中所有类</p><h2 id="_7、什么是多态" tabindex="-1">7、什么是多态 <a class="header-anchor" href="#_7、什么是多态" aria-label="Permalink to &quot;7、什么是多态&quot;">​</a></h2><p>  多态指的是不同的对象收到同一消息可以产生完全不同的结果；主要分为两类：参数多态、包含多态、过载多态、强制多态；</p><p>  参数多态：采用参数化模板，通过给出不同的类型参数，使得一个结构有多种类型；</p><p>  包含多态：可以实现子类型化，即一个类型是另一个类型的子类型；</p><p>  过载多态：同一个名字在不同的上下文中所代表的含义不同；</p><h2 id="_8、什么是动态绑定" tabindex="-1">8、什么是动态绑定？ <a class="header-anchor" href="#_8、什么是动态绑定" aria-label="Permalink to &quot;8、什么是动态绑定？&quot;">​</a></h2><p>  动态绑定是指在运行时把过程调用和响应调用所需要执行的代码加以结合；</p><h2 id="_9、面向对象设计7个基本原则" tabindex="-1">9、面向对象设计7个基本原则 <a class="header-anchor" href="#_9、面向对象设计7个基本原则" aria-label="Permalink to &quot;9、面向对象设计7个基本原则&quot;">​</a></h2><p>  ① 单一责任原则：就一个类而言，应该仅有一个引起其变化的原因</p><p>  ② 开放-封闭原则：软件实体应该是可扩展的(开放的)，但是不可修改的(封闭的)</p><p>  ③ 里氏替换原则：子类型必须能够替换掉他们的基类型</p><p>  ④ 依赖倒置原则：高层模块不应该依赖于底层模块，二者都应该依赖于抽象</p><p>  ⑤ 接口分离原则：不应该强迫客户依赖于他们不用的方法，接口属于用户，不属于它所在的类层次结构，依赖于抽象，不要依赖于具体</p><p>  ⑥ 共同封闭原则：包中的所有类对于同一类性质的变化应该是共同封闭的，对包内所有类有影响，但对其他包无影响</p><p>  ⑦ 共同重用原则：如果重用了包中一个类，那么就要重用包中所有类</p>',83)]))}const u=t(n,[["render",s]]);export{c as __pageData,u as default};
