import{_ as o,c as d,a2 as c,o as a}from"./chunks/framework.Cy5ZJKdt.js";const p=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"vueAdvance/vue_origin.md","filePath":"vueAdvance/vue_origin.md"}'),r={name:"vueAdvance/vue_origin.md"};function t(i,e,h,n,l,s){return a(),d("div",null,e[0]||(e[0]=[c('<h2 id="进阶学习日志" tabindex="-1">进阶学习日志 <a class="header-anchor" href="#进阶学习日志" aria-label="Permalink to &quot;进阶学习日志&quot;">​</a></h2><h3 id="_1、axios如何进行封装" tabindex="-1">1、axios如何进行封装 <a class="header-anchor" href="#_1、axios如何进行封装" aria-label="Permalink to &quot;1、axios如何进行封装&quot;">​</a></h3><p>关键字：<code>请求拦截</code>、<code>响应拦截</code>、<code>异常处理</code></p><h3 id="_2、前端性能如何提升" tabindex="-1">2、前端性能如何提升 <a class="header-anchor" href="#_2、前端性能如何提升" aria-label="Permalink to &quot;2、前端性能如何提升&quot;">​</a></h3><p>关键字：<code>LCP</code>、<code>关键渲染路径</code>、<code>异常处理</code></p><h3 id="_3、vue2和vue3的响应式实现" tabindex="-1">3、Vue2和Vue3的响应式实现 <a class="header-anchor" href="#_3、vue2和vue3的响应式实现" aria-label="Permalink to &quot;3、Vue2和Vue3的响应式实现&quot;">​</a></h3><p>关键字：<code>数据劫持</code>、<code>watcher观察者</code>、<code>handler拦截器</code></p><h3 id="_4、大量请求如何控制并发" tabindex="-1">4、大量请求如何控制并发 <a class="header-anchor" href="#_4、大量请求如何控制并发" aria-label="Permalink to &quot;4、大量请求如何控制并发&quot;">​</a></h3><p>背景：<code>数据采集平台</code>、<code>低代码编辑平台</code>、<code>有序稳定请求</code> 方案：<code>防抖/节流</code>、<code>分页/滚动加载</code>、<code>请求队列</code> 关键字：<code>Promise</code>、<code>任务/请求队列</code>、<code>请求池效果</code></p><h3 id="_5、前端构建工具的作用-主流的构建工具的区别" tabindex="-1">5、前端构建工具的作用，主流的构建工具的区别 <a class="header-anchor" href="#_5、前端构建工具的作用-主流的构建工具的区别" aria-label="Permalink to &quot;5、前端构建工具的作用，主流的构建工具的区别&quot;">​</a></h3><p>关键字：<code>Bundler前端打包工具</code>、<code>Webpack</code>、<code>Vite</code></p><h3 id="_6、对于vue-suspense的使用" tabindex="-1">6、对于Vue Suspense的使用 <a class="header-anchor" href="#_6、对于vue-suspense的使用" aria-label="Permalink to &quot;6、对于Vue Suspense的使用&quot;">​</a></h3><p>关键字：<code>异步依赖</code>、<code>三个关键事件</code>、<code>管理加载状态</code>、<code>嵌套顺序</code></p><h3 id="_7、组件复用-公共代码复用-的方式" tabindex="-1">7、组件复用(公共代码复用)的方式 <a class="header-anchor" href="#_7、组件复用-公共代码复用-的方式" aria-label="Permalink to &quot;7、组件复用(公共代码复用)的方式&quot;">​</a></h3><p>关键字：<code>远程组件</code>、<code>npm包</code>、<code>monorepo</code>、<code>嵌套顺序</code></p><h3 id="_8、前端打包为什么静态文件名是一串hash值" tabindex="-1">8、前端打包为什么静态文件名是一串Hash值 <a class="header-anchor" href="#_8、前端打包为什么静态文件名是一串hash值" aria-label="Permalink to &quot;8、前端打包为什么静态文件名是一串Hash值&quot;">​</a></h3><p>关键字：<code>缓存有效性</code>、<code>避免缓存问题</code>、<code>版本控制</code>、<code>提高安全性</code>、<code>启发式缓存</code>、<code>浏览器默认缓存</code></p><h3 id="_9、前端如何实现权限控制" tabindex="-1">9、前端如何实现权限控制 <a class="header-anchor" href="#_9、前端如何实现权限控制" aria-label="Permalink to &quot;9、前端如何实现权限控制&quot;">​</a></h3><p>关键字：<code>基于 RBAC 的权限控制</code>、<code>页面权限</code>、<code>按钮权限</code>、<code>路由表权限表</code>、<code>v-hasPermi自定义指令</code></p><h3 id="_10、number类型数值溢出如何处理" tabindex="-1">10、Number类型数值溢出如何处理 <a class="header-anchor" href="#_10、number类型数值溢出如何处理" aria-label="Permalink to &quot;10、Number类型数值溢出如何处理&quot;">​</a></h3><p>背景：<code>金融行业</code>、<code>大数据行业</code>、<code>科学计算/数据分析</code> 方案：<code>BigInt类型</code>、<code>三方库decimal.js</code>、<code>合理的数据格式化</code></p><h3 id="_11、web-worker处理大文件上传如" tabindex="-1">11、web-worker处理大文件上传如 <a class="header-anchor" href="#_11、web-worker处理大文件上传如" aria-label="Permalink to &quot;11、web-worker处理大文件上传如&quot;">​</a></h3><p>背景：<code>音视频文件</code>、<code>行业资料文件上传</code>、<code>断点续传/嗅探</code>、<code>切片上传</code>、<code>切片性能</code>、<code>上传进度跟踪</code>、<code>拖拽上传</code>、<code>多文件上传</code> 方案：<code>前端切片</code>、<code>切片转换/命名</code>、<code>传递方式</code> 关键字：<code>切片</code>、<code>多线程</code>、<code>indexedDB</code>、<code>嗅探</code></p><h3 id="_12、页面截图-海报制作方案" tabindex="-1">12、页面截图/海报制作方案 <a class="header-anchor" href="#_12、页面截图-海报制作方案" aria-label="Permalink to &quot;12、页面截图/海报制作方案&quot;">​</a></h3><p>背景：<code>截图分享</code>、<code>页面导出图片</code>、<code>绘图编辑器导出</code> 方案：<code>canvas</code>、<code>Puppeteer(无头浏览器/无头表格)</code>、<code>html2canvas异步插件</code>、<code>selector选择器</code></p><h3 id="_13、移动端适配问题如何解决" tabindex="-1">13、移动端适配问题如何解决 <a class="header-anchor" href="#_13、移动端适配问题如何解决" aria-label="Permalink to &quot;13、移动端适配问题如何解决&quot;">​</a></h3><p>背景：<code>PC端兼容移动端</code> 方案：<code>弹性布局</code>、<code>媒体查询响应式</code>、<code>rem/em相对元素计算</code>、<code>设置视窗（设备宽高/缩放等）</code>、<code>flexible.js插件</code></p><h3 id="_14、npm第三方包如何修改" tabindex="-1">14、npm第三方包如何修改 <a class="header-anchor" href="#_14、npm第三方包如何修改" aria-label="Permalink to &quot;14、npm第三方包如何修改&quot;">​</a></h3><p>背景：<code>需求优化</code>、<code>稳定库</code> 方案：<code>直接修改node_modules</code>、<code>patch-package库方案</code>、<code>自己拷贝源码修改发布</code></p><h3 id="_15、ci-cd流程是怎样的" tabindex="-1">15、CI/CD流程是怎样的 <a class="header-anchor" href="#_15、ci-cd流程是怎样的" aria-label="Permalink to &quot;15、CI/CD流程是怎样的&quot;">​</a></h3><p>关键字：<code>远程组件</code>、<code>npm包</code>、<code>monorepo</code>、<code>嵌套顺序</code></p><p>CI/CD（持续集成/持续交付或持续部署）是一种软件开发实践，旨在提高软件开发的效率和质量。以下是 CI/CD 流程的基本步骤和组成部分</p><p>CI持续集成是指开发人员频繁地将代码集成到主干（主分支）中。每次集成都通过自动化构建和测试来验证。</p><p>CD持续交付是指在持续集成的基础上，自动化将代码部署到生产环境或预生产环境的过程。持续交付确保代码在任何时候都可以安全地发布。</p>',34)]))}const m=o(r,[["render",t]]);export{p as __pageData,m as default};
